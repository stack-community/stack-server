(　# Judgement is it prime number #
    (number) var
    2 (i) var
    true (flag) var
    
    (   (false) (true)
        number 2 less if (flag) var
    ) (
        (false (flag) var) 
        (
            (
                ( 
                    false (flag) var
                ) ()
                number i mod 0 equal if

                i 1 add (i) var
            )
            (i number 0.5 pow 1 add less flag and) while
        ) number 2 mod 0 equal number 3 mod 0 equal or if
    ) number 4 less if
    flag
)
(prime?) var

(users.stk) read-file eval (auth) var

[(reply) 
    [(user)]
    [(result)]
] (reply) var

[(prime-app)
    [(address) (0.0.0.0:8888)]
    [(buffer-size) 1024]
]
[] instance (option) var

option [
    [[(GET /) (auth) (auth)] (
        (body) var (user) var user println
        (ip-address) var ip-address println

        (text/html) (index.html) read-file
        reply [user 0 get (ここに判定結果が表示されます)]
        instance template
    )]

    [[(POST /) (auth) (auth)] (
        (body) var (user) var body println
        (ip-address) var ip-address println

        body (number=) () replace (arg) var        
        arg ([0-9]+) regex () join (number) cast 
        prime? eval (result) var

        arg (は素数です) (は素数ではありません)
        result if concat (result) var

        (text/html) (index.html) read-file
        reply [user 0 get result] instance
        template
    )]

    [[(POST /api)] (
        (body) var body println
        (ip-address) var ip-address println

        body (number) get-json (number) cast (num) var
        num prime? eval (result) var

        ({"number": <1>, "result": <2>}) 
        (<1>) num replace (<2>) result replace
        (application/json) swap
    )]

    [[(GET /new)] (
        pop (ip-address) var ip-address println
        (text/html) (new.html) read-file
    )]

    [[(POST /new)] (
        (body) var body println
        (ip-address) var ip-address println
        
        body (&) split (i) (
            i (=) split (splited) var
            splited 1 get splited 0 get var
        ) for

        auth [name pass] append (auth) var
        auth println
        auth (users.stk) write-file

        (text/html) (ご登録ありがとうございました)
    )]

    [[(GET /delete) (auth) (auth)] (
        pop (user) var
        auth copy user index del (auth) var 
        auth (users.stk) write-file
        
        (text/html) (ご利用ありがとうございました。<br>またのご利用お待ちしております。)
    )] 
] start-server
